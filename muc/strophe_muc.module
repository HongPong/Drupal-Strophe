<?php
/**
 *
 * @file strophe_muc.module multi-user chat constructor and configuration for Strophe XMPP Chat
 *
 * Drupal 7 tweeked by Dan Feidt (HongPong http://drupal.org/user/60005)
 * Drupal 6 Developed by Mathieu Lecarme (athoune http://drupal.org/user/378820)
 *
 * Class: strophe_room with default lines=5, room='conference'
 * Implements hooks block_info, configure, save, view. strophe_muc_theme, strophe_muc_menu, 
 * strophe_muc_admin_settings.
 * admin menu at: admin/config/strophe/muc
 */

class strophe_room {
  /**
   * @constructor
   * strophe_room with default lines=5, room='conference'
   */
  function __construct() {
    $debug = (bool)variable_get('strophe_debug', '');
    if ($debug) {
      drupal_set_message(t('strophe_room constructing'));
    }
    $this->lines = 5;
    $this->room = 'conference';
  }
}

/**
 * Implements hook_menu(). Strophe Multi User Chat w. BOSH
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_muc_menu() {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
    drupal_set_message('hook strophe_muc_menu ');
  }

  $items['admin/config/strophe/muc'] = array(
    'description' => 'Multi User Chatroom with XMPP over HTTP',
    'title' => 'Strophe Multi User Chat w. BOSH',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('strophe_muc_admin_settings'),
    'access arguments' => array('administer site configuration'),
    /*'type' => MENU_NORMAL_ITEM,*/
  );
  return $items;
}


/**
 * Implements hook_block_info().
 */
function strophe_muc_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
    $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
        drupal_set_message('hook strophe_muc_block_info');
      }
  
  $blocks['delta-0'] = array(
    'info' => t('Multi User Chat room'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['delta-1'] = array(
    'info' => t('Connected chatters'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure(). Sets number of chat lines/room default, direct talk settings
 */
function strophe_muc_block_configure($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
        drupal_set_message(t('hook strophe_muc_block_configure'));
      }
  switch ($delta) {
    case 'delta-0':
      $form['strophe_block_num_lines'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of chat line to display'),
        '#default_value' => variable_get('strophe_block_num_lines', 5),
      );
      $form['strophe_block_room'] = array(
        '#type' => 'textfield',
        '#title' => t('Room name'),
        '#default_value' => variable_get('strophe_block_room', 'conference'),
      );
      break;
    case 'delta-1':
      $form['strophe_link_to_talk'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Direct talk'),
        '#default_value' => variable_get('strophe_link_to_talk', array('talk' => 0)),
        '#description' => t('Allow a click to a chatter name to init a talk.'),
        '#options' => array('talk' => t('Direct talk')),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save(). Save number of lines and link to talk.
 */
function strophe_muc_block_save($delta, $edit) {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
    drupal_set_message(t('strophe_muc_block_save'));
  }
  variable_set('strophe_block_num_lines', (int) $edit['strophe_block_num_lines']);
  variable_set('strophe_link_to_talk', $edit['strophe_link_to_talk']);
}

/**
 * Implements hook_block_view().
 * Builds rooms. sys variables strophe_block_num_lines, strophe_block_room, strophe_domain.
 */
function strophe_muc_block_view($delta) {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
    drupal_set_message(t('hook strophe_muc_block_view'));
  }
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  global $user;
  if (0 == $user->uid) {
    return;
  }
  // creates new strophe_room with 5 lines and named conference@jabber.org by default
  // sys variables strophe_block_num_lines, strophe_block_room, strophe_domain
  $room = new strophe_room();
  $room->lines = variable_get('strophe_block_num_lines', 5);
  $room->room = variable_get('strophe_block_room', 'conference') . '@conference.' . variable_get('strophe_domain', 'jabber.org');
  static $only_once = TRUE;
  
  //settings are doubled if you use a room and a presence in a same page
  if ($only_once) {
    if ($debug) {
      drupal_set_message(t('strophe_muc only_once=true'));
    }
    // adds to Drupal.settings.strophe.room, strophe.direct_talk_url, strophe.me 
    drupal_add_js(array(
      'strophe' => array(
        'room' => $room->room,
        'direct_talk_url' => base_path() . 'discussion-with/',
        'me' => $user->name,
      ),
    ), array('type' => 'setting', 'scope' => JS_DEFAULT)); //[FIXME] handle multiple chat room
    $only_once = False;
  }
  //multi user chat js file include
  drupal_add_js(drupal_get_path('module', 'strophe') . '/muc/muc.js');

  // chat room and presence list generators
  switch ($delta) {
    //multi user chat room default options
    // @return theme('strophe_muc_room', array('chatroom' => $room, 'delta' => $delta))
    case 'delta-0':
        if ($debug) {drupal_set_message('multi user chat room block_view');}

      drupal_add_js(drupal_get_path('module', 'strophe') . '/muc/muc_room.js');
      $block['subject'] = t('The chat room');
      $block['content'] = theme('strophe_muc_room', array('chatroom' => $room, 'delta' => $delta));
      return $block;
    //generate presence list, system var strophe_link_to_talk, click_to_talk,
    // @return theme('strophe_muc_presence', array('chatroom' => $room));
    case 'delta-1':
      if ($debug) {
        drupal_set_message('multi user chat presence block_view');
      }
      $ltt = variable_get('strophe_link_to_talk', array('talk' => 0));
      drupal_add_js(array(
        'strophe' => array('click_to_talk' => ($ltt['talk'] !== 0)),
      ), array('type' => 'setting', 'scope' => JS_DEFAULT));
      drupal_add_js(drupal_get_path('module', 'strophe') . '/muc/muc_presence.js');
      $block['subject'] = t('Presence list');
      $block['content'] = theme('strophe_muc_presence', array('chatroom' => $room));
      return $block;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_muc_block_OLD($op = 'list', $delta = 0, $edit = array()) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'strophe') . '/strophe.inc';
}

/**
 * Implements hook_theme(). room: 'strophe_muc_room', presence list 'strophe_muc_presence'
 */
function strophe_muc_theme() {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
    drupal_set_message('hook strophe_muc_theme');
  }
  $path = drupal_get_path('module', 'strophe_muc');
  return array(
    'strophe_muc_room' => array(
      'path' => "$path/theme",
      'template' => 'strophe_muc_room',
      'variables' => array(
        'chatroom' => NULL,
        'delta' => 0,
      ),
    ),
    //theme presence list
    'strophe_muc_presence' => array(
      'path' => "$path/theme",
      'template' => 'strophe_muc_presence',
      'variables' => array(
        'chatroom' => NULL,
        'delta' => 0,
      ),
    ),
  );
}

/* function template_preprocess_strophe_muc_room(&$variables) {
 * drupal_add_js(drupal_get_path('module', 'strophe') . '/muc/muc.js');
 }*/


/**
 * Set strophe_default_room variable, Name of the default MUC (Multi User Chatroom)
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_muc_admin_settings($form, &$form_state) {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {
    drupal_set_message(t('hook strophe_muc_admin_settings'));
  }
  $form['strophe_default_room'] = array(
    '#type' => 'textfield',
    '#title' => 'Default room name',
    '#default_value' => variable_get('strophe_default_room', 'drupal'),
    '#description' => t("Name of the default MUC (Multi User Chatroom)"),
  );
  return system_settings_form($form);
}

