<?php
/**
 * @file Strophe chat init, admin settings and block code.
 *
 * Tweeked for Drupal 7 by Dan Feidt (HongPong http://drupal.org/user/60005)
 * Drupal 6 Developed by Mathieu Lecarme (athoune http://drupal.org/user/378820)
 * Original code http://github.com/athoune/Drupal-Strophe
 *
 * uses ejabberd_auth drupalAuth.inc 
 *
 * system variable strophe_debug when = 1 displays many status updates and watchdog entries 
 * @see ejabberd_auth
 */

/**
 * Implements hook_init().
 * connects to xmpp - passwd to ejabberd_auth_hash($user->name); nickname($user)
 */
function strophe_init() {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {  
        drupal_set_message('hook init strophe module ');
      }
  static $only_once = True;
  if ($only_once) {
    $only_once = False;
    global $user;
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ejabberd_auth') . '/drupalAuth.inc';
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'strophe') . '/strophe.inc';
    // attaches bosh service javascript
    // 'xmpp' JID set to strope_jid($user); passwd to ejabberd_auth_hash($user->name); nickname($user)
    
    drupal_add_js(array(
      'xmpp' => array(
        'bosh_service' => variable_get('strophe_bosh_url', '/http-bind'),
        'jid' => strophe_jid($user),
        'passwd' => ejabberd_auth_hash($user->name),
        'nickname' => $user->name,
      ),
    )
    , array('type' => 'setting', 'scope' => JS_DEFAULT));
    //chat 'b64', 'md5', 'sha1', 'drupal'
    
    $js = array('jquery.cookie', 'strophe', 'poem', 'init');
    foreach ($js as $j) {
      drupal_add_js(drupal_get_path('module', 'strophe') . "/js/$j.js");
    }
    
    if (0 != $user->uid) {
      drupal_add_js(drupal_get_path('module', 'strophe') . "/js/connect.js", array('type' => 'file', 'scope' => 'footer', 'weight' => JS_THEME));
    }
  }
}

/**
 * Implements hook_menu(). Calls strophe_admin_settings.
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_menu() {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {  
        drupal_set_message('hook menu strophemodule ');
      }
  $items['admin/config/strophe'] = array(
    'description' => 'Chat with XMPP over HTTP',
    'title' => 'Strophe Chat with BOSH',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('strophe_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings menu. Set URL for BOSH service, XMPP domain, Client, room and bot settings
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_admin_settings($form, &$form_state) {
  $form['strophe_jabber'] = array(
    '#title' => t('XMPP'),
    '#type' => 'fieldset',
    '#description' => t('XMPP settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['strophe_jabber']['strophe_bosh_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of BOSH service'),
    '#default_value' => variable_get('strophe_bosh_url', '/http-bind'),
    '#description' => t("URL of the BOSH service for Jabber HTTP binding"),
  );
  $form['strophe_jabber']['strophe_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain for XMPP'),
    '#default_value' => variable_get('strophe_domain', 'jabber.org'),
    '#description' => t("The XMPP server domain Drupal connects to"),
  );
  $form['strophe_jabber']['strophe_place'] = array(
    '#type' => 'textfield',
    '#title' => t('Place for XMPP'),
    '#default_value' => variable_get('strophe_place', 'Drupal_Strophe_Client'),
    '#description' => t("Place/Client name: XMPP user can be connected more than one time
    with different place (the name of the client, or the name of the place where is the chatter is)"),
  );
  $form['strophe_bot'] = array(
    '#title' => t('XMPP Admin Bot Settings'),
    '#type' => 'fieldset',
    '#description' => t('The bot, for automated admin account access on XMPP server'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['strophe_bot']['strophe_bot_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Strophe bot user'),
    '#default_value' => variable_get('strophe_bot_user', 'admin'),
    '#description' => t("Bot user, should have admin access control in ejabberd.cfg 
    (usually /etc/ejabberd.cfg)"),
  );
  $form['strophe_bot']['strophe_bot_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Strophe Default room name'),
    '#default_value' => variable_get('strophe_bot_name', 'The bot'),
    '#description' => t("Name of the bot"),
  );
  $form['strophe_dev'] = array(
    '#title' => t('Strophe / Ejabberd Developer settings'),
    '#type' => 'fieldset',
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['strophe_dev']['strophe_debug'] = array(
    '#type' => 'textfield',
    '#title' => t('Strophe general debug mode'),
    '#default_value' => variable_get('strophe_debug', '0'),
    '#description' => t("1 = debug, 0 = off / Fill your watchdog & message windows with updates for great dev justice"),
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_block_info(). Don't cache strophe-xmpp-status.
 */
function strophe_block_info() {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {  
        drupal_set_message('hook info strophe-xmpp-status block ');
  }
  $blocks['strophe-xmpp-status'] = array(
    'info' => t('XMPP status Strophe'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function strophe_block_configure($delta) {
  switch ($delta) {
    case 'strophe-xmpp-status':
      break;
  }
}

/**
 * Implements hook_block_save().
 */
function strophe_block_save($delta, $edit) { }

/**
 * Implements hook_block_view(). Loads strophe/js/status.js if block enabled
 */
function strophe_block_view($delta) {
  $debug = (bool)variable_get('strophe_debug', '');
  if ($debug) {drupal_set_message('strophe_block_view');}
  global $user;
  if (0 == $user->uid) {
    return;
  }
  switch ($delta) {
    case 'strophe-xmpp-status':
      if ($debug) {  
        drupal_set_message('hook view strophe-xmpp-status block ');
      }
      drupal_add_js(drupal_get_path('module', 'strophe') . '/js/status.js');
      $block['subject'] = t('XMPP Status');
      $block['content'] = theme('strophe_status');
      return $block;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_block_OLD($op = 'list', $delta = 0, $edit = array()) { }

/**
 * Implements hook_theme(). Uses strophe_status for template function.
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function strophe_theme() {
  $debug = (bool)variable_get('strophe_debug', '');
      if ($debug) {drupal_set_message('hook strophe_theme with template strophe-status');}

  $path = drupal_get_path('module', 'strophe');
  return array(
    'strophe_status' => array(
      'path' => "$path/theme",
      'template' => 'strophe_status',
      'variables' => array(),
    ),
  );
}
